{"version":3,"sources":["actions/task.js","sagas/task.js","sagas/index.js","history.js","styles/index.js","components/TaskLog.js","utils/splitTasksByTime.js","components/TaskChart.js","components/TaskTimer.js","scenes/home/Home.js","scenes/task/Task.js","scenes/NotFound.js","App.js","serviceWorker.js","utils/getRandom.js","utils/generateRandomTasks.js","reducers/task.js","reducers/index.js","index.js"],"names":["RECEIVE_TASKS","RECEIVE_TASK","RECEIVE_CURRENT_TASK","UPDATE_CURRENT_TASK","RESET_INDICATORS","START_TASK","STOP_TASK","DESTROY_TASK","GENERATE_RANDOM_TASKS","receiveTasks","payload","type","receiveCurrentTask","updateCurrentTask","startTask","stopTask","watchRoot","syncState","initState","rootSaga","regenerator_default","a","wrap","_context","prev","next","call","takeLatest","stop","_marked","_ref","_ref$task","currentItem","items","_context2","delay","select","sent","task","localStorage","setItem","JSON","stringify","_marked2","currentTask","tasks","_context3","parse","getItem","name","start","put","_marked3","_context4","all","_marked4","sagas_marked","history","createHashHistory","styles","theme","root","display","flex","alignItems","flexDirection","subRoot","width","container","maxWidth","textField","marginBottom","color","timer","height","background","fontSize","card","marginTop","minWidth","pos","actionTimer","actionButton","buttonContainerCenter","justifyContent","tabs","tabsItems","modal","top","left","transform","position","backgroundColor","palette","paper","boxShadow","shadows","padding","spacing","unit","outline","modalContent","modalClose","right","bottom","contentWrapper","button","cellTable","marginTopContainer","connect","_ref2","destroyTask","withStyles","classes","_useState","useState","_useState2","Object","slicedToArray","deleteConfirmationDialog","setDeleteConfirmationDialog","_useState3","_useState4","itemForDelete","setItemForDelete","closeDeleteDialog","react_default","createElement","Grid_default","className","Dialog_default","open","onClose","DialogTitle_default","DialogActions_default","Button_default","onClick","id","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","map","row","key","component","scope","DateTime","fromISO","toFormat","Interval","fromDateTimes","toDuration","variant","Link","to","concat","fromISOToDate","date","splitTasksByTime","Array","from","length","item","index","value","Math","floor","objectSpread","local","fromObject","hour","minute","second","toISO","filter","results","time","stopTime","startDate","Number","day","plus","minutes","set","seconds","milliseconds","reduce","accumulator","generateRandomTasks","data","useMemo","es6","margin","strokeDasharray","dataKey","fill","props","taskName","setTaskName","setTimer","_useState5","_useState6","warning","setWarning","useEffect","clock","setInterval","clearInterval","_useDebouncedCallback","useDebouncedCallback","taskNameDebounceCallback","Modal_default","aria-labelledby","aria-describedby","Typography_default","TextField_default","label","onChange","e","target","Fab_default","trim","direction","components_TaskTimer","AppBar_default","Tabs_default","location","pathname","Tab_default","react_router","path","exact","TaskLog","TaskChart","isError","receiveTask","match","params","Card_default","CardContent_default","CardActions_default","size","goBack","resetIndicators","justify","xs","md","gutterBottom","RouterLink","App","Home","Task","NotFound","Boolean","window","hostname","getRandom","min","arguments","undefined","max","random","taskId","stopDate","push","initialState","isFetching","combineReducers","state","action","toConsumableArray","find","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","composeWithDevTools","applyMiddleware","run","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cff9db9.chunk.js","sourcesContent":["export const RECEIVE_TASKS = 'RECEIVE_TASKS';\nexport const RECEIVE_TASK = 'RECEIVE_TASK';\nexport const RECEIVE_CURRENT_TASK = 'RECEIVE_CURRENT_TASK';\nexport const UPDATE_CURRENT_TASK = 'UPDATE_CURRENT_TASK';\nexport const RESET_INDICATORS = 'RESET_INDICATORS';\nexport const START_TASK = 'START_TASK';\nexport const STOP_TASK = 'STOP_TASK';\nexport const DESTROY_TASK = 'DESTROY_TASK';\nexport const GENERATE_RANDOM_TASKS = 'GENERATE_RANDOM_TASKS';\n\nexport const receiveTasks = (payload) => {\n  return { type: RECEIVE_TASKS, payload };\n};\n\nexport const receiveTask = (payload) => {\n  return { type: RECEIVE_TASK, payload };\n};\n\nexport const receiveCurrentTask = (payload) => {\n  return { type: RECEIVE_CURRENT_TASK, payload };\n};\n\nexport const updateCurrentTask = (payload) => {\n  return { type: UPDATE_CURRENT_TASK, payload };\n};\n\nexport const startTask = (payload) => {\n  return { type: START_TASK, payload };\n};\n\nexport const stopTask = (payload) => {\n  return { type: STOP_TASK, payload };\n};\n\nexport const destroyTask = (payload) => {\n  return { type: DESTROY_TASK, payload };\n};\n\nexport const generateRandomTasks = () => {\n  return { type: GENERATE_RANDOM_TASKS };\n};\n\nexport const resetIndicators = () => {\n  return { type: RESET_INDICATORS };\n};\n","import { put, takeLatest, select, all, call, delay } from 'redux-saga/effects';\n\nimport {\n  receiveTasks,\n  receiveCurrentTask,\n} from '../actions/task';\n\nexport function* watchRoot() {\n  yield call(initState);\n  yield takeLatest('*', syncState);\n}\n\nexport function* syncState() {\n  yield delay(300);\n\n  const { task: { currentItem, items} } = yield select();\n\n  yield call(() => {\n    localStorage.setItem('currentTask', JSON.stringify(currentItem));\n    localStorage.setItem('tasks', JSON.stringify(items));\n  });\n}\n\nexport function* initState() {\n  const currentTask = yield call(() => {\n    return JSON.parse(localStorage.getItem('currentTask') || JSON.stringify({\n      name: '',\n      start: null,\n      stop: null,\n    }));\n  });\n\n  const tasks = yield call(() => {\n    return JSON.parse(localStorage.getItem('tasks') || JSON.stringify([]));\n  });\n\n  yield put(receiveCurrentTask(currentTask));\n  yield put(receiveTasks(tasks));\n}\n\nexport default function* rootSaga() {\n  yield all([\n    watchRoot(),\n  ]);\n}\n","import { all } from 'redux-saga/effects';\n\nimport task from './task';\n\nexport default function* rootSaga() {\n  yield all([\n    task(),\n  ]);\n}\n","import { createHashHistory } from 'history';\nconst history = createHashHistory();\n\nexport default history;\n","const styles = theme => ({\n  root: {\n    display: 'flex',\n    flex: 1,\n    alignItems: 'center',\n    flexDirection: 'column',\n  },\n  subRoot: {\n    display: 'flex',\n    width: '100%',\n    flexDirection: 'column',\n  },\n  container: {\n    maxWidth: '60rem',\n  },\n  textField: {\n    width: '12rem',\n    marginBottom: '1.5rem',\n    color: '#3f51b5',\n  },\n  timer: {\n    width: '10rem',\n    height: '10rem',\n    background: '#ffffff',\n    marginBottom: '1.5rem',\n    fontSize: '2rem',\n    color: '#3f51b5',\n  },\n  card: {\n    marginTop: '1.5rem',\n    marginBottom: '1.5rem',\n    minWidth: '60rem',\n  },\n  pos: {\n    marginTop: 12,\n    marginBottom: 3,\n  },\n  actionTimer: {\n    marginBottom: '1.5rem',\n    background: '#ffffff',\n    color: '#3f51b5',\n  },\n  actionButton: {\n    marginTop: '1.5rem',\n    marginBottom: '1.5rem',\n    background: '#ffffff',\n    color: '#3f51b5',\n  },\n  buttonContainerCenter: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  tabs: {\n    marginBottom: '1.5rem',\n  },\n  tabsItems: {\n    background: '#00bcd4',\n  },\n  modal: {\n    top: `50%`,\n    left: `50%`,\n    transform: `translate(-50%, -50%)`,\n    position: 'absolute',\n    width: '40rem',\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n  modalContent: {\n    marginBottom: '1.5rem',\n  },\n  modalClose: {\n    position: 'absolute',\n    color: '#3f51b5',\n    right: 15,\n    bottom: 10,\n  },\n  contentWrapper: {\n    marginBottom: '1.5rem',\n  },\n  button: {\n    background: '#ffffff',\n    color: '#3f51b5',\n  },\n  cellTable: {\n    background: '#eaf6ff',\n  },\n  marginTopContainer: {\n    marginTop: '1.5rem',\n  },\n});\n\nexport default styles;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { DateTime, Interval } from 'luxon';\nimport { Link } from 'react-router-dom';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from \"@material-ui/core/Button\";\n\n// Actions\nimport {\n  destroyTask\n} from '../actions/task';\n\nimport styles from '../styles';\n\nconst TaskLog = ({ classes, destroyTask, tasks }) => {\n  const [deleteConfirmationDialog, setDeleteConfirmationDialog] = useState(false);\n  const [itemForDelete, setItemForDelete] = useState({});\n\n  const closeDeleteDialog = () => {\n    setDeleteConfirmationDialog(false);\n  };\n\n  const openDeleteDialog = (item) => {\n    setItemForDelete(item);\n    setDeleteConfirmationDialog(true);\n  };\n\n  const deleteItem = () => {\n    destroyTask({\n      id: itemForDelete.id,\n    });\n\n    closeDeleteDialog();\n  };\n\n  return (\n    <Grid container className={classes.contentWrapper}>\n      <Dialog\n        open={deleteConfirmationDialog}\n        onClose={closeDeleteDialog}\n      >\n        <DialogTitle>\n          Are you sure you want to delete this task?\n        </DialogTitle>\n        <DialogActions>\n          <Button\n            onClick={closeDeleteDialog}\n            color=\"primary\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={deleteItem}\n            color=\"secondary\"\n          >\n            delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>#</TableCell>\n            <TableCell>Task</TableCell>\n            <TableCell>Time start</TableCell>\n            <TableCell>Time end</TableCell>\n            <TableCell>Time spend</TableCell>\n            <TableCell>Info</TableCell>\n            <TableCell>Delete</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {tasks.map(row => (\n            <TableRow\n              key={row.id}\n              className={classes.cellTable}\n            >\n              <TableCell component=\"th\" scope=\"row\">\n                {row.id}\n              </TableCell>\n              <TableCell>\n                {row.name}\n              </TableCell>\n              <TableCell>\n                {DateTime.fromISO(row.start).toFormat('HH:mm:ss')}\n              </TableCell>\n              <TableCell>\n                {DateTime.fromISO(row.stop).toFormat('HH:mm:ss')}\n              </TableCell>\n              <TableCell>\n                {\n                  Interval\n                    .fromDateTimes(DateTime.fromISO(row.start), DateTime.fromISO(row.stop))\n                    .toDuration()\n                    .toFormat('hh:mm:ss')\n                }\n              </TableCell>\n              <TableCell>\n                <Button\n                  variant=\"contained\"\n                  className={classes.button}\n                  component={Link}\n                  to={`/tasks/${row.id}`}\n                >\n                  Info\n                </Button>\n              </TableCell>\n              <TableCell>\n                <Button\n                  variant=\"contained\"\n                  className={classes.button}\n                  onClick={() => openDeleteDialog(row)}\n                >\n                  Delete\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Grid>\n  );\n};\n\nTaskLog.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  destroyTask: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  ({ task }) => ({\n    tasks: task.items,\n  }), {\n    destroyTask,\n  })(withStyles(styles)(TaskLog));\n","import { DateTime, Interval } from 'luxon';\n\nconst fromISOToDate = (date) => DateTime.fromISO(date).toFormat('yyyy-MM-dd');\n\nconst splitTasksByTime = (tasks) => {\n  return Array.from({ length: 24 }, (item, index) => ({\n      name: index,\n      value: Math.floor(tasks\n        .map(item => ({\n          ...item,\n          start: fromISOToDate(item.stop) === DateTime.local().toFormat('yyyy-MM-dd')\n            && fromISOToDate(item.start) !== fromISOToDate(item.stop)\n              ? DateTime.fromObject({ hour: 0, minute: 0, second: 0 }).toISO() : item.start,\n        }))\n        .filter(item => fromISOToDate(item.start) === DateTime.local().toFormat('yyyy-MM-dd'))\n        .map((item) => {\n          const results = {};\n          let time = DateTime.fromISO(item.start);\n          const stopTime = DateTime.fromISO(item.stop);\n          const startDate = time.toFormat('yyyy-MM-dd');\n\n          while (time <= stopTime) {\n            if (time.hour === stopTime.hour) {\n              results[time.hour] = Number(Interval.fromDateTimes(time, stopTime).toDuration().toFormat('s'));\n            } else {\n              results[time.hour] = Number(Interval\n                .fromDateTimes(time, DateTime.fromObject({ day: time.day, hour: time.hour + 1 }))\n                .toDuration().toFormat('s'));\n            }\n\n            time = time.plus({ minutes: (60 - time.minute) }).set({ seconds: 0, milliseconds: 0 });\n\n            if (startDate !== time.toFormat('yyyy-MM-dd')) {\n              break;\n            }\n          }\n\n          return results;\n        }).reduce((accumulator, value) => accumulator + (value[index] || 0), 0) / 60),\n    }));\n};\n\nexport default splitTasksByTime;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport styles from '../styles';\n\n// Actions\nimport { generateRandomTasks } from '../actions/task'\n\nimport splitTasksByTime from '../utils/splitTasksByTime';\n\nconst TaskChart = ({ classes, tasks, generateRandomTasks }) => {\n  const data = useMemo(() => splitTasksByTime(tasks), [tasks]);\n\n  return (\n    <div className={classes.subRoot}>\n      <ResponsiveContainer\n        width=\"100%\"\n        height={300}\n      >\n        <BarChart\n          height={300}\n          data={data}\n          margin={{\n            top: 5, right: 30, left: 20, bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar\n            name='Minutes in this hours'\n            dataKey=\"value\"\n            fill=\"#3248c7\"\n          />\n        </BarChart>\n      </ResponsiveContainer>\n\n      <div className={classes.buttonContainerCenter}>\n        <Button\n          variant=\"contained\"\n          className={classes.actionButton}\n          onClick={() => {\n            generateRandomTasks();\n          }}\n        >\n          Generate\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nTaskChart.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  generateRandomTasks: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  ({ task }) => ({\n    tasks: task.items,\n  }), {\n    generateRandomTasks,\n  })(withStyles(styles)(TaskChart));\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { DateTime, Interval } from 'luxon';\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport Typography from '@material-ui/core/Typography';\n\n// Actions\nimport {\n  startTask,\n  stopTask,\n  updateCurrentTask,\n} from '../actions/task';\n\nimport styles from '../styles';\n\nconst TaskTimer = (props) => {\n  const { classes } = props;\n  const [taskName, setTaskName] = useState('');\n  const [timer, setTimer] = useState('00:00:00');\n  const [warning, setWarning] = useState(false);\n\n  useEffect(() => {\n    const clock = () => {\n      setTimer(Interval\n        .fromDateTimes(DateTime.fromISO(props.currentTask.start), DateTime.local())\n        .toDuration()\n        .toFormat('hh:mm:ss'));\n    };\n\n    // Run timer immediately.\n    if (props.currentTask.start) {\n      clock();\n    }\n\n    const timer = setInterval(() => {\n      if (props.currentTask.start) {\n        clock();\n      } else {\n        setTimer('00:00:00');\n        clearInterval(timer);\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [props.currentTask.start]);\n\n  const [taskNameDebounceCallback] = useDebouncedCallback((value) => {\n    props.updateCurrentTask({\n      name: value,\n    });\n  }, 300);\n\n  useEffect(() => {\n    // Restore task name\n    setTaskName(props.currentTask.name);\n  }, [props.currentTask.start]);\n\n  const startTask = () => {\n    props.startTask({\n      ...props.currentTask,\n      start: DateTime.local().toISO(),\n      stop: null,\n    });\n  };\n\n  const stopTask = () => {\n    if (taskName.trim() !== '') {\n      props.stopTask({\n        ...props.currentTask,\n        stop: DateTime.local().toISO(),\n      });\n    } else {\n      setWarning(true);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Modal\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n        open={warning}\n        onClose={() => {\n          setWarning(false);\n        }}\n      >\n        <div className={classes.modal}>\n          <Grid\n            container\n            className={classes.modalContent}\n          >\n            <Typography\n              variant=\"h6\"\n              color='error'\n              id=\"modal-title\"\n            >\n              Empty task name\n            </Typography>\n            <Typography\n              variant=\"subtitle1\"\n              id=\"simple-modal-description\"\n            >\n              You are trying close your task without name, enter the title and try again!\n            </Typography>\n          </Grid>\n\n          <Button\n            className={classes.modalClose}\n            onClick={() => {\n              setWarning(false);\n            }}\n          >\n            Close\n          </Button>\n        </div>\n      </Modal>\n\n      <TextField\n        id=\"standard-name\"\n        label=\"Name of your task\"\n        className={classes.textField}\n        value={taskName}\n        onChange={(e) => {\n          setTaskName(e.target.value);\n          taskNameDebounceCallback(e.target.value);\n        }}\n        margin=\"normal\"\n      />\n\n      <Fab className={classes.timer}>\n        { timer }\n      </Fab>\n\n      { !props.currentTask.start ?\n        <Button\n          variant=\"contained\"\n          onClick={startTask}\n          className={classes.actionTimer}\n        >\n          Start\n        </Button>\n        :\n        <Button\n          variant=\"contained\"\n          onClick={stopTask}\n          className={classes.actionTimer}\n        >\n          Stop\n        </Button>\n      }\n    </div>\n  );\n};\n\nTaskTimer.propTypes = {\n  currentTask: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    start: PropTypes.any,\n    stop: PropTypes.any,\n  }),\n  startTask: PropTypes.func.isRequired,\n  stopTask: PropTypes.func.isRequired,\n  updateCurrentTask: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  ({ task }) => ({\n    currentTask: task.currentItem,\n  }), {\n    startTask,\n    stopTask,\n    updateCurrentTask,\n  })(withStyles(styles)(TaskTimer));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Route, Link } from 'react-router-dom';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport TaskLog from '../../components/TaskLog';\nimport TaskChart from '../../components/TaskChart';\nimport TaskTimer from '../../components/TaskTimer';\n\n// Actions\nimport {\n  startTask,\n  stopTask,\n  updateCurrentTask,\n} from '../../actions/task';\n\nimport styles from '../../styles';\n\nconst Home = (props) => {\n  const { classes } = props;\n\n  return (\n    <div className={classes.root}>\n      <Grid\n        container\n        alignItems='center'\n        direction='column'\n        className={classes.container}\n      >\n        <TaskTimer />\n\n        <AppBar\n          position=\"static\"\n          className={classes.tabs}\n        >\n          <Tabs\n            className={classes.tabsItems}\n            variant=\"fullWidth\"\n            value={props.location.pathname === '/' ? 0 : 1}\n          >\n            <Tab\n              component={Link}\n              to={'/'}\n              label=\"Tasks log\"\n            />\n            <Tab\n              component={Link}\n              to={'/chart'}\n              label=\"Tasks chart\"\n            />\n          </Tabs>\n        </AppBar>\n\n        <Route\n          path={`/`}\n          exact\n          component={TaskLog}\n        />\n        <Route\n          path={`/chart`}\n          exact\n          component={TaskChart}\n        />\n      </Grid>\n    </div>\n  );\n};\n\nHome.propTypes = {\n  currentTask: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    start: PropTypes.any,\n    stop: PropTypes.any,\n  }),\n  startTask: PropTypes.func.isRequired,\n  stopTask: PropTypes.func.isRequired,\n  updateCurrentTask: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  ({ task }) => ({\n    currentTask: task.currentItem,\n  }), {\n    startTask,\n    stopTask,\n    updateCurrentTask,\n  })(withStyles(styles)(Home));\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { DateTime, Interval } from 'luxon';\nimport { Redirect } from 'react-router-dom';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\n// Actions\nimport {\n  receiveTask,\n} from '../../actions/task';\n\nimport styles from '../../styles';\n\nconst Task = ({ classes, task, match, history, isError, receiveTask }) => {\n  if (isError) {\n    return <Redirect to={'/404'} />;\n  }\n\n  useEffect(() => {\n    // Load task\n    receiveTask({\n      id: Number(match.params.id),\n    });\n  }, [match.params.id]);\n\n  return (\n    <div className={classes.root}>\n      <Grid container alignItems='center' direction='column' className={classes.container}>\n\n        <Card className={classes.card}>\n          <CardContent>\n            <Typography\n              variant=\"h4\"\n              component=\"h2\"\n            >\n              { task.name }\n            </Typography>\n            <Typography\n              className={classes.pos}\n              color=\"textSecondary\"\n            >\n              Start\n            </Typography>\n            <Typography component=\"p\">\n              { DateTime.fromISO(task.start).toFormat('yyyy-MM-dd HH:mm:ss')}\n            </Typography>\n            <Typography\n              className={classes.pos}\n              color=\"textSecondary\"\n            >\n              End\n            </Typography>\n            <Typography component=\"p\">\n              { DateTime.fromISO(task.stop).toFormat('yyyy-MM-dd HH:mm:ss')}\n            </Typography>\n            <Typography\n              className={classes.pos}\n              color=\"textSecondary\"\n            >\n              Time spend\n            </Typography>\n            <Typography component=\"p\">\n              {\n                Interval\n                  .fromDateTimes(DateTime.fromISO(task.start), DateTime.fromISO(task.stop))\n                  .toDuration()\n                  .toFormat('hh:mm:ss')\n              }\n            </Typography>\n          </CardContent>\n          <CardActions>\n            <Button\n              size=\"small\"\n              onClick={() => {\n                history.goBack();\n              }}\n            >\n              Back\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n    </div>\n  );\n};\n\nTask.propTypes = {\n  task: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    start: PropTypes.any,\n    stop: PropTypes.any,\n  }),\n  receiveTask: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  ({ task }) => ({\n    task: task.item,\n    isError: task.isError,\n  }), {\n    receiveTask,\n  })(withStyles(styles)(Task));\n","import React, { useEffect } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\n// Actions\nimport {\n  resetIndicators,\n} from '../actions/task';\n\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\n\nimport { withStyles } from '@material-ui/core';\nimport styles from '../styles';\nimport {connect} from \"react-redux\";\n\nconst NotFound = ({ classes, resetIndicators }) => {\n  useEffect(() => {\n    resetIndicators();\n  }, []);\n\n  return (\n    <Grid\n      className={classes.marginTopContainer}\n      container\n      justify=\"center\"\n    >\n      <Grid item xs={12} md={6}>\n        <Card>\n          <CardContent>\n            <Typography\n              variant=\"h4\"\n              gutterBottom\n            >\n              404\n            </Typography>\n            <Typography\n              color=\"textSecondary\"\n            >\n              Page not found.\n            </Typography>\n          </CardContent>\n          <CardActions>\n            <Button\n              className={classes.button}\n              size=\"small\"\n              component={RouterLink}\n              to={'/'}\n            >\n              Homepage\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default connect(\n  () => ({}), {\n    resetIndicators,\n  })(withStyles(styles)(NotFound));\n","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport history from './history';\n\nimport Home from './scenes/home/Home';\nimport Task from './scenes/task/Task';\nimport NotFound from './scenes/NotFound';\n\nconst App = () => {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/chart\" exact component={Home} />\n        <Route path=\"/tasks/:id\" exact component={Task} />\n        <Route component={NotFound} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const getRandom = (min = 0, max) => {\n  return Math.floor(Math.random() * (max - min) + min + 1);\n};\n\nexport default getRandom;\n","import {DateTime} from \"luxon\";\nimport getRandom from \"./getRandom\";\n\nconst generateRandomTasks = () => {\n  let taskId = 1;\n  const data = [];\n  let startDate = DateTime.fromObject({ hour: 0, minute: 0, second: 0 });\n  let stopDate = null;\n\n  while (startDate.toFormat('yyyy-LL-dd') === DateTime.local().toFormat('yyyy-LL-dd')) {\n    startDate = startDate.plus({seconds: getRandom(0, 60 * 60 * 1.5)});\n    stopDate = startDate.plus({seconds: getRandom(60 * 10, 60 * 60 * 1.5)});\n\n    data.push({\n      id: taskId,\n      start: startDate.toISO(),\n      stop: stopDate.toISO(),\n      name: `Task #${taskId}`,\n    });\n\n    taskId += 1;\n\n    startDate = stopDate;\n  }\n\n  return data;\n};\n\nexport default generateRandomTasks;\n","import {\n  RECEIVE_TASKS,\n  RECEIVE_TASK,\n  RECEIVE_CURRENT_TASK,\n  RESET_INDICATORS,\n  START_TASK,\n  STOP_TASK,\n  UPDATE_CURRENT_TASK,\n  DESTROY_TASK,\n  GENERATE_RANDOM_TASKS,\n} from '../actions/task';\n\nimport generateRandomTasks from '../utils/generateRandomTasks';\n\nconst initialState = {\n  isFetching: false,\n  isError: false,\n  items: [],\n  item: {},\n  currentItem: {\n    start: null,\n    name: '',\n    stop: null,\n  },\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case START_TASK:\n      return {\n        ...state,\n        currentItem: action.payload,\n      };\n    case UPDATE_CURRENT_TASK:\n      return {\n        ...state,\n        currentItem: {\n          ...state.currentItem,\n          ...action.payload,\n        },\n      };\n    case STOP_TASK:\n      return {\n        ...state,\n        items: [\n          ...state.items,\n          {\n            ...action.payload,\n            id: (state.items[state.items.length - 1] && state.items[state.items.length - 1].id + 1) || 1,\n          }\n        ],\n        currentItem: initialState.currentItem,\n      };\n    case RECEIVE_CURRENT_TASK:\n      return {\n        ...state,\n        currentItem: action.payload,\n      };\n    case RECEIVE_TASK:\n      return {\n        ...state,\n        item: state.items.find(item => item.id === action.payload.id) || {},\n        isError: !state.items.find(item => item.id === action.payload.id),\n      };\n    case RECEIVE_TASKS:\n      return {\n        ...state,\n        items: action.payload,\n      };\n    case DESTROY_TASK:\n      return {\n        ...state,\n        items: state.items.filter(item => item.id !== action.payload.id),\n      };\n    case GENERATE_RANDOM_TASKS:\n      return {\n        ...state,\n        items: generateRandomTasks(),\n      };\n    case RESET_INDICATORS:\n      return {\n        ...state,\n        isFetching: false,\n        isError: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\n\nimport task from './task';\n\nexport default combineReducers({ task });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootSaga from './sagas'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport reducers from './reducers';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(sagaMiddleware)));\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}